help for diskless clients booting(links).

    # diskless, Ubuntu on a cluster, ubuntu clustering
    # over view of the process : https://docs.vmware.com/en/VMware-vSphere/7.0/com.vmware.esxi.upgrade.doc/GUID-44535B01-38CF-4E6D-862A-95EF5ACA3F03.html
    # https://www.xmodulo.com/diskless-boot-linux-machine.html
    # https://help.ubuntu.com/community/DisklessUbuntuHowto
    # https://wiki.ubuntu.com/EasyUbuntuClustering/UbuntuKerrighedClusterGuide
    # https://pages.cs.wisc.edu/~govindan/steps
    # https://wiki.debian.org/PXEBootDisklessSystem
    # https://wiki.debian.org/PXEBootInstall
    # https://github.com/Technohacker/central-diskless-boot
    # https://xunnanxu.github.io/2020/11/28pxelinux.0/PXE-Boot-Diskless-Raspberry-Pi-4-With-Ubuntu-Ubiquiti-and-Synology-2-Config-TFTP-and-NFS-mounts/
    # https://eelvex.net/post/diskless-cluster-on-debian-installation-log/

    # https://github.com/topics/pxe-server
    # http://perso.citi-lab.fr/sdalu/sysadmin/dnsmasq/
    # https://nodisk.org/


    # DRBL : provides a diskless or systemless environment for client machines.
    # ipxe : https://ipxe.org/
    # Setting up a remote diskless system
    # Configuring diskless clients
    # How to run linux diskless
    # Diskless and dataless clients


------------------------------------- Summary of diskless booting -----------------------------------------------------

==> DHCP server sends the client its IP-address, boot-file name(pxelinux.0), and ip-address of the TFTP server.
==> client ask TFTP server for the boot file(pxelinux.0) specified by DHCP server.
==> diskless client needs  pxelinux.0 file to enable boot from network card.
==> To start booting client ask for pxelinux.cfg/default file from the TFTP server.
==> pxelinux.cfg/default configuration file stores the location of the initrd.img, vmlinuz-kernel and root file ststem(/).
==> client ask TFTP server for initrd.img and vmlinuz-kernel.
==> initrd.img loads RAM disk as root file system and runs some programs.
==> initrd.img then loads the linux kernal(vmlinuz-kernel).
==> after this the root file system shared by NFS is mounted.
==> And the system is ready for the use.

Architecture of diskless booting
    --> TFTP server store boot, kernal files    :  pxelinux.0, pxelinux.cfg/default, initrd.img, vmlinuz-kernel-version
    --> NFS  server store root file system      :  /
    --> DHCP server give client with details    :  ip-address, TFTP-server-IP, name of file for network booting(pxelinux.0)

important files/directories/cmds
    --> /var/lib/tftpboot
    --> /var/lib/tftpboot/***/pxelinux.cfg/default
    --> /usr/lib/syslinux/pxelinux.0
    --> /boot/vmlinuz-6.1.0-10-amd64
    --> /boot/initrd.img
    --> /etc/initramfs-tools/initramfs.conf
    --> /client-linux  (nfs shared root dir)
    --> /client-linux/etc/fstab
    --> /client-linux/etc/network/
    --> /etc/dhcp/dhcpd.conf
    --> /etc/default/tftpd-hpainterfaces
    --> mkinitramfs command

How it works (simplified scheme):

    # The computer bios/uefi sends ordinary dhcp request (DHCPDISCOVER)
    # The dhcp server sends a response with the next-server option
    # The computer sends DHCPREQUEST/DHCPINFORM request
    # The dhcp server sends TFTP server address and the filename to upload
    # The computer downloads this file from the tftp server. Its size is limited so, often, it's a bootloader like pxeinux
    # pxelinux reads its own config and downloads Linux kernel using initramfs
    # Linux kernel downloads squashfs with main rootfs
    # switch_root to its squashfs

----------------------------------------  Steps  -----------------------------------------

==> flow : pxelinux.0 -> pxelinux.cfg/default -> initrd.img -> vmlinuz-kernel-version -->(mount fs on /)

steps for diskless booting:
    # install/clone linux with softwares in a directory. This will be used by diskless client.
    # configure NFS to share the directory created in above step containing installed linux(root directory).
    # configure tftp service to serve files for booting diskless clients.
        (pxelinux.cfg/default, initrd.img, vmlinuz-kernel-version)
    # configure the DHCP server to server (pxelinux.0, ip-address, tftp-server-address)
    # configure the exported file system  (/etc/fstab, client-network interface, initrd.img, file permissions)
    # ubuntu :  dhcp3-server, tftpd-hpa, syslinux, nfs-kernel-server, initramfs-tools
    # redhat :  dhcp, tftp-server, syslinux, xinetd, dracut-network

--------------------------------------- important files --------------------------------------

--> files : pxelinux.0, pxelinux.cfg/default, initrd.img, vmlinuz-kernel-version

pxelinux.0
    # first file to be executed of diskless booting
    # Syslinux package conatins boot loaders like pxelinux.0 and others.
    # location : /usr/lib/syslinux/pxelinux.0
    # save this file to tftp server : /var/lib/tftpboot/disklessLinux/pxelinux.0

vmlinuz-kernel-version
    # is a bootable Linux kernel image
    # debian : location /boot/vmlinuz-6.1.0-10-amd64
    # save this file to tftp server : /var/lib/tftpboot/disklessLinux/vmlinuz-6.1.0-10-amd64

initrd.img(re-created with some changes)
    # boot loader uses it to load/mount a RAM disk as root fs. Afterwards, actual fs is mounted as root fs.
    # location /boot/initrd.img-kversion.
    # It dont have network boot support. Thus you need to re-create initrd.img with modification.
        --> modify /etc/initramfs-tools/initramfs.conf as follows
            (BOOT=nfs, MODULES=netboot)
        --> sudo mkinitramfs -o /path_for_new_initrd/initrd.img
    # save modified initrd.img to tftp server : /var/lib/tftpboot/disklessLinux/initrd.img



pxelinux.cfg/default
    # shows --> vmlinuz file, initrd.img file, nfsroot dir contining linux file system.

    LABEL linux
    KERNEL   vmlinuz-kernel-version   #kernel-image-file-name
    APPEND   root=/dev/nfs    initrd=initrd.img   nfsroot=nfs-server-ip:/client-linux   ip=dhcp   rw

    # these 2 options can also be added to avove line -->   boot=nfs  netboot=nfs
    #  save this file to tftp server : /var/lib/tftpboot/disklessLinux/pxelinux.cfg/default

/etc/default/tftpd-hpa
    # Add the following lines
        RUN_DAEMON="yes"
        OPTIONS="-l -s /var/lib/tftpboot/"
        TFTP_USERNAME="tftp"
        TFTP_DIRECTORY="/var/lib/tftpboot/"
        TFTP_ADDRESS="0.0.0.0:69"

/client-linux
    # Create dir /client-linux and give 777 permissions to it.
    # install/clone linux in this this directory.
    # share this directory with NFS.

modify /client-linux/etc/fstab (nfs share)
    # make sure that for the client, the nfs gets mounted at mount point /.
    # add following lines
        /dev/nfs    /    nfs    defaults    1   1
    # remove swap entry from fstab
    # Comment out the portion that does remount as read-only in /nfsroot/etc/init.d/voyage-util

modify /client-linux/etc/network/interfaces:
    # so that the network interface for the client is set as manual not dhcp not auto
            #auto eth0
            #iface eth0 inet dhcp
            iface eth0 inet manual
    # If the above step is not done, the nw-interface will try to get reconfigured after boot and will disconnect NFS.

Modify /etc/rcS.d/S12voyage-sync script
    # to do ntp datetime update on boot
        case $1 in
            'start')
                    if [ "$VOYAGE_SAVE_DATE_TIME" = "YES" ] ; then
                            restore_system_time
                    fi
                    ntpdate `findserverip`

permissions
    # sudo chmod -R 777 /var/lib/tftpboot

packages needed
    # ubuntu : sudo apt-get install dhcp3-server tftpd-hpa syslinux nfs-kernel-server initramfs-tools



------------------------------------  diskless Booting  new  for redhat -------------------------------------------


install servers:
    # install NFS, tftp, DHCP
    # Configure firewall rules to allow nfs, tftp and dhcp traffic.
    # make nfs, dhcp, tftp start at boot time.
        --> systemctl enable --now tftp  (systemctl enable --now tftpd-hpa)
        --> same for dhcp and nfs(nfs-server.service) service


create following directories:
    # /client-linux                 :   install/clone linux in this directory. This will be used by diskless client.
    # /client-linux                 :   initramfs-kernel-version.img

    # /var/lib/tftpboot/biosPXE     :   only used for bios based systems
                                        pxelinux.0, "./pxelinux.cfg/default",
                                        vmlinuz-kernel-version, initramfs-kernel-version.img,
                                        ldlinux.c32


system configuration:
    ==> configure nfs to share /client-linux directory
    ==> Add following lines to file /etc/dhcp/dhcpd.conf

        allow booting;
        allow bootp;

        class "pxeclients" {
            match if substring(option vendor-class-identifier, 0, 9) = "PXEClient";
            next-server tftp-server-ip;

            if option architecture-type = 00:07 {
                filename "biosPXE/BOOTX64.EFI";     # this file is located inside /var/lib/tftpboot dir
            } else {
                filename "uefiPXE/pxelinux.0";      # this file is located inside /var/lib/tftpboot dir
            }
        }

    ==>  /var/lib/tftpboot/biosPXE/pxelinux.cfg/default

            LABEL linux
            KERNEL   vmlinuz-XXXX
            APPEND   root=/dev/nfs    initrd=initrd.img-XXXX     nfsroot=nfs-server-ip:/client-linux   ip=dhcp   rw


    ==>  /etc/default/tftpd-hpa
            TFTP_USERNAME="tftp"
            TFTP_DIRECTORY="/srv/tftp"
            TFTP_ADDRESS="0.0.0.0:69"
            TFTP_OPTIONS="--secure"

    ==> restart nfs, dhcp, nfs services

-------------------------------------------------------------------------------------------------------

following files are needed for pxe installation (redhat)

    # /var/lib/tftpboot/uefiPXE     :   only used for UEFI based systems
                                        BOOTX64.EFI, grub.efi, grub.cfg

    # /var/lib/tftpboot/debian-img  :   only used for UEFI based systems
                                        vmlinuz, initrd.img

------------------------------------------------------------------------------------------








